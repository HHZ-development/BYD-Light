// 精密构件公告系统
// 为玩家提供制作提示和系统消息

// ============ 全局公告配置 ============
const announcements = {
    welcome: {
        message: '§6[精密构件系统] §f欢迎来到 HongHuCraft！输入 §e/precision help §f查看调试命令',
        interval: 300000, // 5分钟显示一次
        enabled: true
    },
    crafting_tips: {
        message: '§b[制作提示] §f精密构件需要在 Create 机械装配台中制作！每个阶段都有特殊要求',
        interval: 600000, // 10分钟显示一次
        enabled: true
    },
    progression_hint: {
        message: '§d[进度提示] §f按顺序制作：基础→改良→高级→专家→大师→传奇，每个阶段解锁新配方！',
        interval: 900000, // 15分钟显示一次
        enabled: true
    }
}

// 存储每个玩家的公告计时器
const playerAnnouncementTimers = new Map()

// ============ 玩家加入时的欢迎公告 ============
PlayerEvents.loggedIn(event => {
    const { player } = event
    
    if (!player) return
    
    // 初始化玩家的公告计时器
    initPlayerAnnouncementTimers(player)
    
    // 延迟3秒显示欢迎消息，避免与其他mod消息冲突
    event.server.scheduleInTicks(60, () => {
        player.tell('§6===========================================')
        player.tell('§e       欢迎来到 HongHuCraft 精密构件系统')
        player.tell('§6===========================================')
        player.tell('§a这是一个基于 Create 模组的进阶制作系统')
        player.tell('§b• 使用 §e/precision help §b查看调试命令')
        player.tell('§b• 在机械装配台中制作精密构件')
        player.tell('§b• 从基础阶段开始，逐步解锁更高级的构件')
        player.tell('§6===========================================')
        
        // 检查玩家进度并给出个性化提示
        if (!player.persistentData.precisionProgress || Object.keys(player.persistentData.precisionProgress).length === 0) {
            player.tell('§7[新手提示] 从制作 §a基础精密构件 §7开始你的旅程！')
        } else {
            // 直接在字符串模板中计算，避免声明任何变量
            player.tell(`§a[欢迎回来] §f你已经完成了 §e${Object.keys(player.persistentData.precisionProgress).filter(key => player.persistentData.precisionProgress[key]).length}§f/6 个精密构件阶段！`)
        }
    })
})

// ============ 玩家退出时清理计时器 ============
PlayerEvents.loggedOut(event => {
    const { player } = event
    if (player && playerAnnouncementTimers.has(player.uuid)) {
        playerAnnouncementTimers.delete(player.uuid)
    }
})

// ============ 初始化玩家公告计时器 ============
function initPlayerAnnouncementTimers(player) {
    if (!player || playerAnnouncementTimers.has(player.uuid)) return
    
    const timers = {}
    
    // 为每种公告类型设置计时器
    Object.entries(announcements).forEach(([key, config]) => {
        if (config.enabled) {
            timers[key] = {
                lastShown: Date.now(),
                interval: config.interval
            }
        }
    })
    
    playerAnnouncementTimers.set(player.uuid, timers)
}

// ============ 定期公告检查（每分钟执行一次）============
ServerEvents.tick(event => {
    // 每1200 ticks（60秒）检查一次
    if (event.server.tickCount % 1200 !== 0) return
    
    const currentTime = Date.now()
    
    // 遍历所有在线玩家
    event.server.players.forEach(player => {
        if (!player || !player.isPlayer()) return
        
        const playerTimers = playerAnnouncementTimers.get(player.uuid)
        if (!playerTimers) {
            initPlayerAnnouncementTimers(player)
            return
        }
        
        // 检查每种公告是否需要显示
        Object.entries(announcements).forEach(([key, config]) => {
            if (!config.enabled || !playerTimers[key]) return
            
            const timeSinceLastShown = currentTime - playerTimers[key].lastShown
            
            if (timeSinceLastShown >= config.interval) {
                player.tell(config.message)
                playerTimers[key].lastShown = currentTime
            }
        })
    })
})

// ============ 特殊事件触发的公告 ============

// 当玩家获得精密构件时的特殊公告
PlayerEvents.inventoryChanged(precisionEvent => {
    const thePlayer = precisionEvent.player
    const theItem = precisionEvent.item
    
    if (!thePlayer || !theItem) return
    
    let messageText = ''
    let tipText = ''
    
    // 根据物品ID设置消息
    if (theItem.id === 'kubejs:basic_precision_component') {
        messageText = '§a[阶段解锁] §f基础阶段完成！现在可以制作改良精密构件了！'
        tipText = '§7提示: 改良精密构件需要在基础构件的基础上添加更多材料'
    } else if (theItem.id === 'kubejs:improved_precision_component') {
        messageText = '§b[阶段解锁] §f改良阶段完成！高级精密构件现已解锁！'
        tipText = '§7提示: 高级构件需要精密机械部件和特殊合金'
    } else if (theItem.id === 'kubejs:advanced_precision_component') {
        messageText = '§d[阶段解锁] §f高级阶段完成！专家级构件等待你的挑战！'
        tipText = '§7提示: 专家级构件需要复杂的组装流程'
    } else if (theItem.id === 'kubejs:expert_precision_component') {
        messageText = '§6[阶段解锁] §f专家阶段完成！大师级构件已开放！'
        tipText = '§7提示: 大师级构件是真正的挑战，需要完美的精度'
    } else if (theItem.id === 'kubejs:master_precision_component') {
        messageText = '§c[阶段解锁] §f大师阶段完成！传奇构件等待着真正的大师！'
        tipText = '§7提示: 传奇构件是最终挑战，需要所有前置构件'
    } else if (theItem.id === 'kubejs:legendary_precision_component') {
        messageText = '§4§l[传奇成就] §f恭喜！你已经掌握了精密构件系统的全部奥秘！'
        tipText = '§e你现在是真正的精密构件大师！'
    }
    
    if (messageText) {
        // 延迟2秒显示公告，避免与其他消息冲突
        precisionEvent.server.scheduleInTicks(40, () => {
            thePlayer.tell('§6◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆')
            thePlayer.tell(messageText)
            thePlayer.tell(tipText)
            thePlayer.tell('§6◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆◇◆')
        })
    }
})

// ============ 管理员命令扩展 ============
ServerEvents.command(event => {
    const { command, sender } = event
    
    if (!command || !sender.isPlayer()) return
    
    const player = sender
    
    // 公告系统管理命令
    if (command.startsWith('precision announcement ')) {
        const args = command.split(' ')
        if (args.length < 3) {
            player.tell('§c[公告系统] §f用法: /precision announcement <enable|disable|test> [类型]')
            event.cancel()
            return
        }
        
        const action = args[2]
        const announcementType = args[3]
        
        switch (action) {
            case 'test':
                if (announcementType && announcements[announcementType]) {
                    player.tell('§a[公告测试] §f' + announcements[announcementType].message)
                } else {
                    player.tell('§b[公告测试] §f所有公告类型:')
                    Object.entries(announcements).forEach(([key, config]) => {
                        player.tell(`§7- ${key}: ${config.enabled ? '§a启用' : '§c禁用'}`)
                    })
                }
                break
                
            case 'enable':
            case 'disable':
                if (announcementType && announcements[announcementType]) {
                    announcements[announcementType].enabled = (action === 'enable')
                    player.tell(`§a[公告系统] §f${announcementType} 公告已${action === 'enable' ? '启用' : '禁用'}`)
                } else {
                    player.tell('§c[公告系统] §f无效的公告类型！可用类型: ' + Object.keys(announcements).join(', '))
                }
                break
                
            default:
                player.tell('§c[公告系统] §f无效的操作！可用操作: enable, disable, test')
        }
        
        event.cancel()
    }
})

console.log('[精密构件公告系统] 已加载完成')
